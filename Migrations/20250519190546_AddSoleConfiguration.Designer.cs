// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250519190546_AddSoleConfiguration")]
    partial class AddSoleConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("WebApplication1.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WebApplication1.Models.Cours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Prix")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rating")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("WebApplication1.Models.SoleConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowPrototypeRequest")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EngravingText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendLinkToClient")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShoeSizeRange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SoleType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SoleConfigurations");
                });

            modelBuilder.Entity("WebApplication1.Models.SoleLayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Density")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ElementCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FinishType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LayerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SoleConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Thickness")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SoleConfigurationId");

                    b.ToTable("SoleLayers");
                });

            modelBuilder.Entity("WebApplication1.Models.Cours", b =>
                {
                    b.HasOne("WebApplication1.Models.Category", "Category")
                        .WithMany("CoursList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApplication1.Models.SoleLayer", b =>
                {
                    b.HasOne("WebApplication1.Models.SoleConfiguration", "SoleConfiguration")
                        .WithMany("Layers")
                        .HasForeignKey("SoleConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoleConfiguration");
                });

            modelBuilder.Entity("WebApplication1.Models.Category", b =>
                {
                    b.Navigation("CoursList");
                });

            modelBuilder.Entity("WebApplication1.Models.SoleConfiguration", b =>
                {
                    b.Navigation("Layers");
                });
#pragma warning restore 612, 618
        }
    }
}
